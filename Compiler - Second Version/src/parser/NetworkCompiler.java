/* Generated By:JavaCC: Do not edit this line. NetworkCompiler.java */
package parser;

import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;

import settings.*;
import intermediate.*;
import commands.*;
import elementars.*;
import enumerations.*;
import network.*;
import exceptions.*;

public class NetworkCompiler implements NetworkCompilerConstants {
  public static void main(String args []) throws ParseException
  {
    Network network = new Network();
    try {
        NetworkCompiler parser = new NetworkCompiler(new FileInputStream(Configuration.mapFile), "UTF-8");
                NetworkCompiler.start(network);
                NetworkParser.networkParserAll(network);
    } catch(FileNotFoundException e) {
                System.err.println("\u005cnFile not found: " + Configuration.mapFile);
        }
    catch(Error err) {
                System.err.println(err.getMessage());
    }

  }

  static final public void start(Network network) throws ParseException {
    settings(network);
    aliasTable(network);
    dataFrame(network);
    rowsDeleting(network);
    adjacencyList(network);
    bipartiteProjection(network);
  }

// ##################################################
  static final public void settings(Network network) throws ParseException {
  MapSettings settings;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_SETTINGS:
      jj_consume_token(lit_SETTINGS);
      jj_consume_token(cte_COLON);
      settings = new MapSettings();
      label_1:
      while (true) {
        variavelSettings(settings);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case lit_CSV_HEADER:
        case lit_COLUMN_SEPARATOR:
        case lit_DATE_FORMAT:
        case lit_DIRECTED_NETWORK:
        case lit_ATTRIBUTE_LABEL:
        case lit_NETWORK_FORMAT_OUTPUT:
        case lit_FILE_SUFIX:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
      }
      network.setSettings(settings);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void variavelSettings(MapSettings settings) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_CSV_HEADER:
      csvDefinition(settings);
      break;
    case lit_COLUMN_SEPARATOR:
      columnSeparatorDefinition(settings);
      break;
    case lit_DATE_FORMAT:
      dateFormatDefinition(settings);
      break;
    case lit_DIRECTED_NETWORK:
      directedNetworkDefinition(settings);
      break;
    case lit_ATTRIBUTE_LABEL:
      attributeLabelDefinition(settings);
      break;
    case lit_NETWORK_FORMAT_OUTPUT:
      networkFormatOutputDefinition(settings);
      break;
    case lit_FILE_SUFIX:
      fileSufixDefinition(settings);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void csvDefinition(MapSettings settings) throws ParseException {
  Token csvHeader;
    jj_consume_token(lit_CSV_HEADER);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    csvHeader = jj_consume_token(cte_LOGIC_VALUE);
                settings.setCsvHeader(csvHeader.image);
  }

  static final public void columnSeparatorDefinition(MapSettings settings) throws ParseException {
  Token columnSeparator;
    jj_consume_token(lit_COLUMN_SEPARATOR);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_COMMA:
      columnSeparator = jj_consume_token(cte_COMMA);
      break;
    case cte_SEMICOLON:
      columnSeparator = jj_consume_token(cte_SEMICOLON);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    settings.setColumnSeparator(columnSeparator.image);
  }

  static final public void dateFormatDefinition(MapSettings settings) throws ParseException {
  Token date;
    jj_consume_token(lit_DATE_FORMAT);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    date = jj_consume_token(var_DATE);
    settings.setDateFormat(date.image);
  }

  static final public void directedNetworkDefinition(MapSettings settings) throws ParseException {
  Token isDirectedNet;
    jj_consume_token(lit_DIRECTED_NETWORK);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    isDirectedNet = jj_consume_token(cte_LOGIC_VALUE);
          settings.setIsDirectedNetwork(isDirectedNet.image);
  }

  static final public void attributeLabelDefinition(MapSettings settings) throws ParseException {
  Token attributeLabel;
    jj_consume_token(lit_ATTRIBUTE_LABEL);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    attributeLabel = jj_consume_token(var_ALIAS_TABLE_COLUMN_HEADER);
          settings.setAttributeLabel(attributeLabel.image);
  }

  static final public void networkFormatOutputDefinition(MapSettings settings) throws ParseException {
  Token networkFormat;
    jj_consume_token(lit_NETWORK_FORMAT_OUTPUT);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    networkFormat = jj_consume_token(cte_NETWORK_FORMAT);
          settings.setNetworkFormat(networkFormat.image);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_2;
      }
      jj_consume_token(cte_COMMA);
      networkFormat = jj_consume_token(cte_NETWORK_FORMAT);
                  settings.setNetworkFormat(networkFormat.image);
    }
  }

  static final public void fileSufixDefinition(MapSettings settings) throws ParseException {
  Token fileSufix;
    jj_consume_token(lit_FILE_SUFIX);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    fileSufix = jj_consume_token(var_CSV_COLUMN_HEADER);
          settings.setFileSufix(fileSufix.image);
  }

// ##################################################
  static final public void aliasTable(Network network) throws ParseException {
  MapAliasTable aliasTable;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_ALIAS_TABLE:
      jj_consume_token(lit_ALIAS_TABLE);
      jj_consume_token(cte_COLON);
                                                    aliasTable = new MapAliasTable();
      label_3:
      while (true) {
        aliasTableBody(aliasTable);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case cte_DOUBLE_MAJOR:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
      }
                  network.setAliasTable(aliasTable);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  static final public void aliasTableBody(MapAliasTable aliasTable) throws ParseException {
  Token variableType, aliasTableColumnHeader, csvColumnHeader;
    jj_consume_token(cte_DOUBLE_MAJOR);
    aliasTableColumnHeader = jj_consume_token(var_ALIAS_TABLE_COLUMN_HEADER);
    variableType = jj_consume_token(lit_VARIABLE_TYPE);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    csvColumnHeader = jj_consume_token(var_CSV_COLUMN_HEADER);
          aliasTable.addColumnEntryToTable(aliasTableColumnHeader.image,
        variableType.image, csvColumnHeader.image);
  }

// ##################################################
  static final public void dataFrame(Network network) throws ParseException {
  MapDataFrame dataFrame;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_DATA_FRAME:
                  dataFrame = new MapDataFrame();
      jj_consume_token(lit_DATA_FRAME);
      jj_consume_token(cte_COLON);
      dataFrameBody(dataFrame);
                  network.setDataFrame(dataFrame);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void dataFrameBody(MapDataFrame dataFrame) throws ParseException {
  Token dataFrameColumnHeader, attributeValue;
  DataFrameComponent dataFrameComponent;
    label_4:
    while (true) {
      jj_consume_token(cte_DOUBLE_MAJOR);
      dataFrameColumnHeader = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
      jj_consume_token(cte_COMMA);
      attributeValue = jj_consume_token(var_CSV_COLUMN_HEADER);
                  dataFrameComponent = new DataFrameComponent(dataFrameColumnHeader, attributeValue);
      label_5:
      while (true) {
        command(dataFrameComponent);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case lit_IF:
        case lit_RETURN:
        case var_ALIAS_TABLE_COLUMN_HEADER:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
      }
                  dataFrame.addDataFrameComponent(dataFrameComponent);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_DOUBLE_MAJOR:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
    }
  }

  static final public void commandList(DataFrameComponent dataFrameComponent) throws ParseException {
    command(dataFrameComponent);
  }

  static final public void command(DataFrameComponent dataFrameComponent) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_RETURN:
      returnCommand(dataFrameComponent);
      break;
    case lit_IF:
      ifCommand(dataFrameComponent);
      break;
    case var_ALIAS_TABLE_COLUMN_HEADER:
      attribuitionCommand(dataFrameComponent);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void returnCommand(DataFrameComponent dataFrameComponent) throws ParseException {
  Return returnCommand; Expression returnExpression;
    jj_consume_token(lit_RETURN);
    returnExpression = expression();
          returnCommand = new Return(returnExpression);
          dataFrameComponent.addDataFrameComponentCommand(returnCommand);
  }

  static final public void attribuitionCommand(DataFrameComponent dataFrameComponent) throws ParseException {
  Attribuition attribuitionCommand; Expression attribuitionExpression;
  Symbol symbol; Token variable;
    variable = jj_consume_token(var_ALIAS_TABLE_COLUMN_HEADER);
    jj_consume_token(cte_EQUAL_ATTRIBUITION);
    attribuitionExpression = expression();
    symbol = new Symbol(variable, TYPE_OPERAND.ALIASTABLECOLUMNHEADER);
    attribuitionCommand = new Attribuition(symbol, attribuitionExpression, variable);
    dataFrameComponent.addDataFrameComponentCommand(attribuitionCommand);
  }

  static final public void ifCommand(DataFrameComponent dataFrameComponent) throws ParseException {
        Conditional conditionalCommand; Expression conditionalExpression;
        DataFrameComponent dataFrameComponentConditional;
    dataFrameComponentConditional = new DataFrameComponent();
    conditionalCommand = new Conditional();
    jj_consume_token(lit_IF);
    conditionalExpression = expression();
    jj_consume_token(cte_COLON);
    commandList(dataFrameComponentConditional);
    conditionalCommand.addIfCommand(conditionalExpression, dataFrameComponentConditional.getCommandList());
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case lit_ELIF:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
      dataFrameComponentConditional = new DataFrameComponent();
      jj_consume_token(lit_ELIF);
      conditionalExpression = expression();
      jj_consume_token(cte_COLON);
      commandList(dataFrameComponentConditional);
            conditionalCommand.addElifCommand(conditionalExpression, dataFrameComponentConditional.getCommandList());
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_ELSE:
      dataFrameComponentConditional = new DataFrameComponent();
      jj_consume_token(lit_ELSE);
      jj_consume_token(cte_COLON);
      commandList(dataFrameComponentConditional);
            conditionalCommand.addElseCommand(dataFrameComponentConditional.getCommandList());
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    dataFrameComponent.addDataFrameComponentCommand(conditionalCommand);
  }

  static final public Expression expression() throws ParseException {
  Expression expression = new Expression();
    expression_1(expression);
    {if (true) return expression;}
    throw new Error("Missing return statement in function");
  }

  static final public void expression_1(Expression expression) throws ParseException {
  Token concat; Item item = null;
    expression_2(expression);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_CONCAT:
        ;
        break;
      default:
        jj_la1[13] = jj_gen;
        break label_7;
      }
      concat = jj_consume_token(cte_CONCAT);
        item = new Operator(concat, TYPE_OPERATOR.CONCAT);
    expression.addItemToPreFixedExpression(item);
      expression_2(expression);
    expression.addItemToPostFixedExpression(item);
    }
  }

  static final public void expression_2(Expression expression) throws ParseException {
  Token logicalOperator; Item item = null; TYPE_OPERATOR typeOperator;
    expression_3(expression);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_AND:
      case cte_OR:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_AND:
        logicalOperator = jj_consume_token(cte_AND);
                                            typeOperator = TYPE_OPERATOR.AND;
        break;
      case cte_OR:
        logicalOperator = jj_consume_token(cte_OR);
                                           typeOperator = TYPE_OPERATOR.OR;
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                item = new Operator(logicalOperator, typeOperator);
                expression.addItemToPreFixedExpression(item);
      expression_3(expression);
                expression.addItemToPostFixedExpression(item);
    }
  }

  static final public void expression_3(Expression expression) throws ParseException {
  Token operator; Item item = null; TYPE_OPERATOR typeOperator;
    expression_4(expression);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_MAJOR_EQUAL:
      case cte_MINOR_EQUAL:
      case cte_MAJOR:
      case cte_MINOR:
      case cte_EQUAL_COMPARE:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_EQUAL_COMPARE:
        operator = jj_consume_token(cte_EQUAL_COMPARE);
                                         typeOperator = TYPE_OPERATOR.EQUAL;
        break;
      case cte_MAJOR_EQUAL:
        operator = jj_consume_token(cte_MAJOR_EQUAL);
                                           typeOperator = TYPE_OPERATOR.GREATER_EQUAL;
        break;
      case cte_MINOR_EQUAL:
        operator = jj_consume_token(cte_MINOR_EQUAL);
                                       typeOperator = TYPE_OPERATOR.LESS_EQUAL;
        break;
      case cte_MAJOR:
        operator = jj_consume_token(cte_MAJOR);
                                 typeOperator = TYPE_OPERATOR.GREATER;
        break;
      case cte_MINOR:
        operator = jj_consume_token(cte_MINOR);
                                 typeOperator = TYPE_OPERATOR.LESS;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                item = new Operator(operator, typeOperator);
                expression.addItemToPreFixedExpression(item);
      expression_4(expression);
                expression.addItemToPostFixedExpression(item);
    }
  }

  static final public void expression_4(Expression expression) throws ParseException {
  Token operator = null; Item item = null; TYPE_OPERATOR typeOperator;
    expression_5(expression);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_PLUS:
      case cte_MINUS:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_PLUS:
        operator = jj_consume_token(cte_PLUS);
                                  typeOperator = TYPE_OPERATOR.SUM;
        break;
      case cte_MINUS:
        operator = jj_consume_token(cte_MINUS);
                                    typeOperator = TYPE_OPERATOR.SUBTRACTION;
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
            item = new Operator(operator, typeOperator);
                        expression.addItemToPreFixedExpression(item);
      expression_5(expression);
                        expression.addItemToPostFixedExpression(item);
    }
  }

  static final public void expression_5(Expression expression) throws ParseException {
  Token not = null; Item item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_NOT:
      not = jj_consume_token(lit_NOT);
          item = new Operator(not, TYPE_OPERATOR.NOT);
                        expression.addItemToPreFixedExpression(item);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    expression_6(expression);
                if(not != null) {
                  expression.addItemToPostFixedExpression(item);
                }
  }

  static final public void expression_6(Expression expression) throws ParseException {
  Token parenthesisOpen, parenthesisClose; Expression newExpression; Item item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_PARENTHESIS_OPEN:
      parenthesisOpen = jj_consume_token(cte_PARENTHESIS_OPEN);
            item = new Operator(parenthesisOpen, TYPE_OPERATOR.PARENTHESIS_OPEN);
                expression.addItemToPreFixedExpression(item);
                expression.addItemToPostFixedExpression(item);
      expression_1(expression);
      // POSSO ESTAR FAZENDO CAGADA (expression - > expression_1)
                parenthesisClose = jj_consume_token(cte_PARENTHESIS_CLOSE);
            item = new Operator(parenthesisClose, TYPE_OPERATOR.PARENTHESIS_CLOSE);
                expression.addItemToPreFixedExpression(item);
      break;
    case cte_LOGIC_VALUE:
    case cte_PLUS:
    case cte_MINUS:
    case var_CSV_COLUMN_HEADER:
    case var_ALIAS_TABLE_COLUMN_HEADER:
    case var_DATA_FRAME_COLUMN_HEADER:
    case var_NUMBER:
    case var_DATE:
      operand(expression);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void operand(Expression expression) throws ParseException {
  Token signalToken = null, operandToken = null; Item item = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case cte_PLUS:
    case cte_MINUS:
    case var_NUMBER:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case var_NUMBER:
        operandToken = jj_consume_token(var_NUMBER);
                    item =  new Operand(operandToken, TYPE_OPERAND.NUMBER);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
        break;
      case cte_MINUS:
        signalToken = jj_consume_token(cte_MINUS);
        operandToken = jj_consume_token(var_NUMBER);
                    item =  new Operand(operandToken, TYPE_OPERAND.NUMBER, SIGNAL.PLUS);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
        break;
      case cte_PLUS:
        signalToken = jj_consume_token(cte_PLUS);
        operandToken = jj_consume_token(var_NUMBER);
                    item =  new Operand(operandToken, TYPE_OPERAND.NUMBER, SIGNAL.PLUS);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case var_CSV_COLUMN_HEADER:
      operandToken = jj_consume_token(var_CSV_COLUMN_HEADER);
                    item =  new Operand(operandToken, TYPE_OPERAND.TEXT);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
      break;
    case var_DATE:
      operandToken = jj_consume_token(var_DATE);
                    item =  new Operand(operandToken, TYPE_OPERAND.DATE);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
      break;
    case cte_LOGIC_VALUE:
      operandToken = jj_consume_token(cte_LOGIC_VALUE);
                    item =  new Operand(operandToken, TYPE_OPERAND.BOOLEAN);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
      break;
    case var_ALIAS_TABLE_COLUMN_HEADER:
      operandToken = jj_consume_token(var_ALIAS_TABLE_COLUMN_HEADER);
                    item =  new Operand(operandToken, TYPE_OPERAND.ALIASTABLECOLUMNHEADER);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
      break;
    case var_DATA_FRAME_COLUMN_HEADER:
      operandToken = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
                    item =  new Operand(operandToken, TYPE_OPERAND.DATAFRAMECOLUMNHEADER);
                        expression.addItemToPreFixedExpression(item);
                        expression.addItemToPostFixedExpression(item);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

// ##################################################
  static final public void rowsDeleting(Network network) throws ParseException {
  MapRowsDeleting mapRowsDeleting;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_ROWS_DELETING:
      jj_consume_token(lit_ROWS_DELETING);
      jj_consume_token(cte_COLON);
                  mapRowsDeleting = new MapRowsDeleting();
      label_11:
      while (true) {
        rowsDeletingBody(mapRowsDeleting);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case cte_DOUBLE_MAJOR:
          ;
          break;
        default:
          jj_la1[24] = jj_gen;
          break label_11;
        }
      }
                  network.setRowsDeleting(mapRowsDeleting);
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void rowsDeletingBody(MapRowsDeleting mapRowsDeleting) throws ParseException {
  Expression expression;
          expression = new Expression();
    jj_consume_token(cte_DOUBLE_MAJOR);
    expression = expression();
          mapRowsDeleting.addExpressionToRowsDeleting(expression);
  }

// ##################################################
  static final public void adjacencyList(Network network) throws ParseException {
  MapAdjacencyList adjacencyList;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_ADJACENCY_LIST:
            adjacencyList = new MapAdjacencyList();
      jj_consume_token(lit_ADJACENCY_LIST);
      jj_consume_token(cte_COLON);
      label_12:
      while (true) {
        adjacencyBody(adjacencyList);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case cte_DOUBLE_MAJOR:
          ;
          break;
        default:
          jj_la1[26] = jj_gen;
          break label_12;
        }
      }
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
  }

  static final public void adjacencyBody(MapAdjacencyList adjacencyList) throws ParseException {
  Token adjacencyVariableToken; Symbol adjacencyVariableSymbol; TYPE_OPERAND typeOperand;
    jj_consume_token(cte_DOUBLE_MAJOR);
    adjacencyVariableToken = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
          typeOperand = TYPE_OPERAND.DATAFRAMECOLUMNHEADER;
          adjacencyVariableSymbol = new Symbol(adjacencyVariableToken, typeOperand);
          adjacencyList.addAdjacencyVariable(adjacencyVariableSymbol);
  }

// ##################################################
  static final public void bipartiteProjection(Network network) throws ParseException {
  MapBipartiteProjection bipartiteProjection;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case lit_BIPARTITE_PROJECTION:
            bipartiteProjection = new MapBipartiteProjection();
      jj_consume_token(lit_BIPARTITE_PROJECTION);
      jj_consume_token(cte_COLON);
      label_13:
      while (true) {
        bipartiteBody(bipartiteProjection);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case cte_DOUBLE_MAJOR:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_13;
        }
      }
            network.setBipartiteProjection(bipartiteProjection);
      break;
    default:
      jj_la1[29] = jj_gen;
      ;
    }
  }

  static final public void bipartiteBody(MapBipartiteProjection bipartiteProjection) throws ParseException {
  ArrayList<Symbol> beforeAt; ArrayList<Symbol> afterAt;
    beforeAt = new ArrayList<Symbol>(); afterAt = new ArrayList<Symbol>();
    jj_consume_token(cte_DOUBLE_MAJOR);
    jj_consume_token(cte_PARENTHESIS_OPEN);
    beforeAt = dataFrameColumnHeaderNodesList(bipartiteProjection);
    jj_consume_token(cte_PARENTHESIS_CLOSE);
    jj_consume_token(cte_POINT);
    jj_consume_token(cte_PARENTHESIS_OPEN);
    afterAt = dataFrameColumnHeaderLinksList(bipartiteProjection);
    jj_consume_token(cte_PARENTHESIS_CLOSE);
          //System.out.println(beforeAt);
          bipartiteProjection.addBipartiteProjection(beforeAt, afterAt);
  }

  static final public ArrayList<Symbol> dataFrameColumnHeaderNodesList(MapBipartiteProjection bipartiteProjection) throws ParseException {
        Token dataFrameColumnHeader; Symbol dataFrameColumnHeaderSymbol; TYPE_OPERAND typeOperand;
        ArrayList<Symbol> beforeAt;
          beforeAt = new ArrayList<Symbol>();
    dataFrameColumnHeader = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
          typeOperand = TYPE_OPERAND.DATAFRAMECOLUMNHEADER;
          dataFrameColumnHeaderSymbol = new Symbol(dataFrameColumnHeader, typeOperand);
          beforeAt.add(dataFrameColumnHeaderSymbol);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_COMMA:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_14;
      }
      jj_consume_token(cte_COMMA);
      dataFrameColumnHeader = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
                  typeOperand = TYPE_OPERAND.DATAFRAMECOLUMNHEADER;
                  dataFrameColumnHeaderSymbol = new Symbol(dataFrameColumnHeader, typeOperand);
                  beforeAt.add(dataFrameColumnHeaderSymbol);
    }
          {if (true) return beforeAt;}
    throw new Error("Missing return statement in function");
  }

  static final public ArrayList<Symbol> dataFrameColumnHeaderLinksList(MapBipartiteProjection bipartiteProjection) throws ParseException {
  Token dataFrameColumnHeader; Symbol dataFrameColumnHeaderSymbol; TYPE_OPERAND typeOperand;
        ArrayList<Symbol> afterAt;
          afterAt = new ArrayList<Symbol>();
    dataFrameColumnHeader = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
          typeOperand = TYPE_OPERAND.DATAFRAMECOLUMNHEADER;
          dataFrameColumnHeaderSymbol = new Symbol(dataFrameColumnHeader, typeOperand);
          afterAt.add(dataFrameColumnHeaderSymbol);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cte_COMMA:
        ;
        break;
      default:
        jj_la1[31] = jj_gen;
        break label_15;
      }
      jj_consume_token(cte_COMMA);
      dataFrameColumnHeader = jj_consume_token(var_DATA_FRAME_COLUMN_HEADER);
                  typeOperand = TYPE_OPERAND.DATAFRAMECOLUMNHEADER;
                  dataFrameColumnHeaderSymbol = new Symbol(dataFrameColumnHeader, typeOperand);
                  afterAt.add(dataFrameColumnHeaderSymbol);
    }
          {if (true) return afterAt;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public NetworkCompilerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[32];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x400,0x0,0x20000000,0x0,0x0,0x800,0x1000,0x0,0x0,0x0,0x0,0x0,0x40000,0x180000,0x180000,0x0,0x0,0x600000,0x600000,0x800000,0x1620000,0x600000,0x620000,0x0,0x2000,0x0,0x4000,0x0,0x8000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x3f800,0x0,0x3f800,0x100,0x100,0x2,0x0,0x0,0x4280000,0x2,0x4280000,0x40000,0x100000,0x0,0x0,0x0,0x7c,0x7c,0x0,0x0,0x0,0xce000000,0x40000000,0xce000000,0x2,0x0,0x2,0x0,0x2,0x0,0x100,0x100,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public NetworkCompiler(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public NetworkCompiler(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new NetworkCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public NetworkCompiler(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new NetworkCompilerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public NetworkCompiler(NetworkCompilerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(NetworkCompilerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 32; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[73];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 32; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 73; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
