/* Generated By:JavaCC: Do not edit this line. NetworkCompilerConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface NetworkCompilerConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int lit_SETTINGS = 10;
  /** RegularExpression Id. */
  int lit_ALIAS_TABLE = 11;
  /** RegularExpression Id. */
  int lit_DATA_FRAME = 12;
  /** RegularExpression Id. */
  int lit_ROWS_DELETING = 13;
  /** RegularExpression Id. */
  int lit_ADJACENCY_LIST = 14;
  /** RegularExpression Id. */
  int lit_BIPARTITE_PROJECTION = 15;
  /** RegularExpression Id. */
  int lit_VARIABLE_TYPE = 16;
  /** RegularExpression Id. */
  int cte_LOGIC_VALUE = 17;
  /** RegularExpression Id. */
  int cte_CONCAT = 18;
  /** RegularExpression Id. */
  int cte_AND = 19;
  /** RegularExpression Id. */
  int cte_OR = 20;
  /** RegularExpression Id. */
  int cte_PLUS = 21;
  /** RegularExpression Id. */
  int cte_MINUS = 22;
  /** RegularExpression Id. */
  int lit_NOT = 23;
  /** RegularExpression Id. */
  int cte_PARENTHESIS_OPEN = 24;
  /** RegularExpression Id. */
  int cte_PARENTHESIS_CLOSE = 25;
  /** RegularExpression Id. */
  int cte_BRACKET_OPEN = 26;
  /** RegularExpression Id. */
  int cte_BRACKET_CLOSE = 27;
  /** RegularExpression Id. */
  int cte_ELLIPSIS = 28;
  /** RegularExpression Id. */
  int cte_SEMICOLON = 29;
  /** RegularExpression Id. */
  int cte_COLON = 30;
  /** RegularExpression Id. */
  int cte_EQUAL_ATTRIBUITION = 31;
  /** RegularExpression Id. */
  int cte_QUOTATION_MARK = 32;
  /** RegularExpression Id. */
  int cte_DOUBLE_MAJOR = 33;
  /** RegularExpression Id. */
  int cte_MAJOR_EQUAL = 34;
  /** RegularExpression Id. */
  int cte_MINOR_EQUAL = 35;
  /** RegularExpression Id. */
  int cte_MAJOR = 36;
  /** RegularExpression Id. */
  int cte_MINOR = 37;
  /** RegularExpression Id. */
  int cte_EQUAL_COMPARE = 38;
  /** RegularExpression Id. */
  int cte_DOLLAR_SIGN = 39;
  /** RegularExpression Id. */
  int cte_COMMA = 40;
  /** RegularExpression Id. */
  int cte_AT_SIGN = 41;
  /** RegularExpression Id. */
  int cte_POINT = 42;
  /** RegularExpression Id. */
  int lit_CSV_HEADER = 43;
  /** RegularExpression Id. */
  int lit_COLUMN_SEPARATOR = 44;
  /** RegularExpression Id. */
  int lit_DATE_FORMAT = 45;
  /** RegularExpression Id. */
  int lit_DIRECTED_NETWORK = 46;
  /** RegularExpression Id. */
  int lit_ATTRIBUTE_LABEL = 47;
  /** RegularExpression Id. */
  int lit_NETWORK_FORMAT_OUTPUT = 48;
  /** RegularExpression Id. */
  int lit_FILE_SUFIX = 49;
  /** RegularExpression Id. */
  int lit_ELIF = 50;
  /** RegularExpression Id. */
  int lit_IF = 51;
  /** RegularExpression Id. */
  int lit_ELSE = 52;
  /** RegularExpression Id. */
  int lit_RETURN = 53;
  /** RegularExpression Id. */
  int cte_NETWORK_FORMAT = 54;
  /** RegularExpression Id. */
  int var_VARIABLECHARACTER = 55;
  /** RegularExpression Id. */
  int var_LETTERCHARACTER = 56;
  /** RegularExpression Id. */
  int var_CSV_COLUMN_HEADER = 57;
  /** RegularExpression Id. */
  int var_ALIAS_TABLE_COLUMN_HEADER = 58;
  /** RegularExpression Id. */
  int var_DATA_FRAME_COLUMN_HEADER = 59;
  /** RegularExpression Id. */
  int var_LOCAL_VARIABLE = 60;
  /** RegularExpression Id. */
  int var_TEXT = 61;
  /** RegularExpression Id. */
  int var_NUMBER = 62;
  /** RegularExpression Id. */
  int var_DATE = 63;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS1 = 64;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS2 = 65;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS3 = 66;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS4 = 67;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS5 = 68;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS6 = 69;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS7 = 70;
  /** RegularExpression Id. */
  int cte_FORMATELLIPSIS8 = 71;
  /** RegularExpression Id. */
  int var_OPTION = 72;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int comentarioGeral = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"#\"",
    "\"\\n\"",
    "\"\\n\\r\"",
    "\"\\r\\n\"",
    "<token of kind 9>",
    "\"Settings\"",
    "\"Alias Table\"",
    "\"Data Frame\"",
    "\"Rows Deleting\"",
    "\"Adjacency List\"",
    "\"Bipartite Projection\"",
    "<lit_VARIABLE_TYPE>",
    "<cte_LOGIC_VALUE>",
    "\"&\"",
    "\"AND\"",
    "\"OR\"",
    "\"+\"",
    "\"-\"",
    "\"NOT\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"...\"",
    "\";\"",
    "\":\"",
    "\"=\"",
    "\"\\\"\"",
    "\">>\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"==\"",
    "\"$\"",
    "\",\"",
    "\"@\"",
    "\".\"",
    "\"CSV header\"",
    "\"Column separator\"",
    "\"Date format\"",
    "\"Directed network\"",
    "\"Attribute label\"",
    "\"Network format\"",
    "\"File suffix\"",
    "\"elif\"",
    "\"if\"",
    "\"else\"",
    "\"return\"",
    "<cte_NETWORK_FORMAT>",
    "<var_VARIABLECHARACTER>",
    "<var_LETTERCHARACTER>",
    "<var_CSV_COLUMN_HEADER>",
    "<var_ALIAS_TABLE_COLUMN_HEADER>",
    "<var_DATA_FRAME_COLUMN_HEADER>",
    "<var_LOCAL_VARIABLE>",
    "<var_TEXT>",
    "<var_NUMBER>",
    "<var_DATE>",
    "<cte_FORMATELLIPSIS1>",
    "<cte_FORMATELLIPSIS2>",
    "<cte_FORMATELLIPSIS3>",
    "<cte_FORMATELLIPSIS4>",
    "<cte_FORMATELLIPSIS5>",
    "<cte_FORMATELLIPSIS6>",
    "<cte_FORMATELLIPSIS7>",
    "<cte_FORMATELLIPSIS8>",
    "<var_OPTION>",
  };

}
