/* Generated By:JavaCC: Do not edit this line. NetworkCompilerTokenManager.java */
package parser;
import java.util.*;
import java.io.*;
import java.nio.file.Files;
import java.nio.charset.StandardCharsets;
import settings.*;
import intermediate.*;
import commands.*;
import elementars.*;
import enumerations.*;
import network.*;
import exceptions.*;

/** Token Manager. */
public class NetworkCompilerTokenManager implements NetworkCompilerConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         jjmatchedKind = 2;
         return jjMoveNfa_0(3, 0);
      case 10:
         jjmatchedKind = 4;
         return jjMoveNfa_0(3, 0);
      case 13:
         jjmatchedKind = 3;
         return jjMoveNfa_0(3, 0);
      case 32:
         jjmatchedKind = 1;
         return jjMoveNfa_0(3, 0);
      case 34:
         jjmatchedKind = 32;
         return jjMoveNfa_0(3, 0);
      case 35:
         jjmatchedKind = 5;
         return jjMoveNfa_0(3, 0);
      case 36:
         jjmatchedKind = 39;
         return jjMoveNfa_0(3, 0);
      case 38:
         jjmatchedKind = 18;
         return jjMoveNfa_0(3, 0);
      case 40:
         jjmatchedKind = 24;
         return jjMoveNfa_0(3, 0);
      case 41:
         jjmatchedKind = 25;
         return jjMoveNfa_0(3, 0);
      case 43:
         jjmatchedKind = 21;
         return jjMoveNfa_0(3, 0);
      case 44:
         jjmatchedKind = 40;
         return jjMoveNfa_0(3, 0);
      case 45:
         jjmatchedKind = 22;
         return jjMoveNfa_0(3, 0);
      case 46:
         jjmatchedKind = 42;
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 58:
         jjmatchedKind = 30;
         return jjMoveNfa_0(3, 0);
      case 59:
         jjmatchedKind = 29;
         return jjMoveNfa_0(3, 0);
      case 60:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 61:
         jjmatchedKind = 31;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 62:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x600000000L);
      case 64:
         jjmatchedKind = 41;
         return jjMoveNfa_0(3, 0);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x800000084800L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x180000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x600000001000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x14000000000000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x1000000800000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x20000000002000L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 91:
         jjmatchedKind = 26;
         return jjMoveNfa_0(3, 0);
      case 93:
         jjmatchedKind = 27;
         return jjMoveNfa_0(3, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x800000084800L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x180000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x600000001000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x14000000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000800000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000002000L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x400L);
      default :
         return jjMoveNfa_0(3, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 0);
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 61:
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 34;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800000000L) != 0L)
         {
            jjmatchedKind = 35;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x4000000000L) != 0L)
         {
            jjmatchedKind = 38;
            jjmatchedPos = 1;
         }
         break;
      case 62:
         if ((active0 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 33;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000001000L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000000000400L);
      case 70:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400000008000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000000800L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000802000L);
      case 82:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         break;
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000001000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x21000000000400L);
      case 102:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 1;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2400000008000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000000000800L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000802000L);
      case 114:
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 20;
            jjmatchedPos = 1;
         }
         break;
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 1);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 1);
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 2;
         }
         break;
      case 68:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000800L);
      case 74:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100000000000L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 84:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x21a00000001400L);
      case 86:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 87:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      case 100:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 2;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000800L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2100000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L);
      case 116:
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 23;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x21a00000001400L);
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      case 119:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 2);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0xd800L);
      case 69:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2600000000000L);
      case 70:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 84:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x20100000000000L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0xd800L);
      case 101:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x2600000000000L);
      case 102:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 3;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20100000000000L);
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 3);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 3);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x2200000003000L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000004000L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000400L);
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000008000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000004000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000400L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000008000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 4);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 4);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 69:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000004000L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000001000L);
      case 78:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000400L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 84:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000008000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000004000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000001000L);
      case 110:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000400L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000008000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 5);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 5);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 69:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000002000L);
      case 71:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 75:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 79:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000002000L);
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2800000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 6);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 6);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800L);
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 68:
         return jjMoveStringLiteralDfa8_0(active0, 0x480000000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 76:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 83:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 84:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000008000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x480000000000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 115:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 7;
         }
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000008000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 7);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 7);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 66:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 69:
         return jjMoveStringLiteralDfa9_0(active0, 0x98000000a000L);
      case 70:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000001000L);
      case 89:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x98000000a000L);
      case 102:
         return jjMoveStringLiteralDfa9_0(active0, 0x3000000000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000001000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 8);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 8);
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000c000L);
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 69:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 9;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 76:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 78:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 79:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 80:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 82:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 9;
         }
         break;
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L);
      case 101:
         if ((active0 & 0x1000L) != 0L)
         {
            jjmatchedKind = 12;
            jjmatchedPos = 9;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 112:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 43;
            jjmatchedPos = 9;
         }
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 9);
}
static private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 9);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      case 69:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
      case 73:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000004000L);
      case 80:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 82:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 84:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
         }
         break;
      case 88:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 10;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      case 101:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 11;
            jjmatchedPos = 10;
         }
         return jjMoveStringLiteralDfa11_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x800000004000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000000000000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 10;
         }
         break;
      case 120:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 10;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 10);
}
static private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 10);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 73:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 78:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000008000L);
      case 84:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000000000000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000008000L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 11);
}
static private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 11);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa13_0(active0, 0x1100000000000L);
      case 66:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      case 71:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 12;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 83:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 87:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x1100000000000L);
      case 98:
         return jjMoveStringLiteralDfa13_0(active0, 0x800000000000L);
      case 103:
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 13;
            jjmatchedPos = 12;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 12);
}
static private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 12);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 12);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      case 74:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 79:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
      case 84:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 13;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000000000L);
      case 106:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x400000000000L);
      case 116:
         if ((active0 & 0x4000L) != 0L)
         {
            jjmatchedKind = 14;
            jjmatchedPos = 13;
         }
         else if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 13;
         }
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 13);
}
static private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 13);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 13);
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 76:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 14;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x8000L);
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 14;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 14);
}
static private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 14);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 14);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      case 75:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 15;
         }
         break;
      case 82:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 15;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      case 107:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 15;
         }
         break;
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 15;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 15);
}
static private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 15);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 15);
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 16);
}
static private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 16);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 16);
   }
   switch(curChar)
   {
      case 73:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 17);
}
static private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 17);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 17);
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000L);
      default :
         break;
   }
   return jjMoveNfa_0(3, 18);
}
static private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(3, 18);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(3, 18);
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 19;
         }
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
         {
            jjmatchedKind = 15;
            jjmatchedPos = 19;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(3, 19);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 193;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 62)
                        kind = 62;
                     jjCheckNAddStates(0, 7);
                  }
                  else if ((0x500000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  else if (curChar == 40)
                     jjCheckNAddStates(8, 23);
                  else if (curChar == 32)
                     jjCheckNAddStates(24, 39);
                  else if (curChar == 34)
                     jjCheckNAddStates(40, 42);
                  else if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 19:
                  if (curChar == 36)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 36:
                  if (curChar == 34)
                     jjCheckNAddStates(40, 42);
                  break;
               case 37:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 34 && kind > 57)
                     kind = 57;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(39, 40);
                  break;
               case 40:
                  if (curChar == 34 && kind > 61)
                     kind = 61;
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 44:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAddTwoStates(45, 47);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 72)
                     kind = 72;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(47);
                  break;
               case 49:
                  if (curChar == 32)
                     jjCheckNAddStates(24, 39);
                  break;
               case 50:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 52:
                  if (curChar == 32)
                     jjCheckNAddStates(43, 46);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(53, 54);
                  break;
               case 54:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 55:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 49);
                  break;
               case 56:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(56, 66);
                  break;
               case 57:
                  if (curChar == 46)
                     jjCheckNAddStates(50, 53);
                  break;
               case 58:
                  if (curChar == 32)
                     jjCheckNAddStates(50, 53);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 60:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(54, 56);
                  break;
               case 62:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 65:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 66:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 68:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(68, 69);
                  break;
               case 70:
                  if (curChar == 32)
                     jjCheckNAddStates(57, 60);
                  break;
               case 71:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 63);
                  break;
               case 74:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(74, 84);
                  break;
               case 75:
                  if (curChar == 46)
                     jjCheckNAddStates(64, 67);
                  break;
               case 76:
                  if (curChar == 32)
                     jjCheckNAddStates(64, 67);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(77, 78);
                  break;
               case 78:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 79:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 80:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(80, 81);
                  break;
               case 81:
                  if (curChar == 41 && kind > 65)
                     kind = 65;
                  break;
               case 83:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 84:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 86:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if (curChar == 40)
                     jjCheckNAddStates(71, 74);
                  break;
               case 88:
                  if (curChar == 32)
                     jjCheckNAddStates(71, 74);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(90, 101);
                  break;
               case 92:
                  if (curChar == 46)
                     jjCheckNAddStates(75, 78);
                  break;
               case 93:
                  if (curChar == 32)
                     jjCheckNAddStates(75, 78);
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(94, 95);
                  break;
               case 95:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 97:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(97, 98);
                  break;
               case 100:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 101:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 103:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(103, 104);
                  break;
               case 104:
                  if (curChar == 40)
                     jjCheckNAddStates(82, 85);
                  break;
               case 105:
                  if (curChar == 32)
                     jjCheckNAddStates(82, 85);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(106, 107);
                  break;
               case 107:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(107, 118);
                  break;
               case 109:
                  if (curChar == 46)
                     jjCheckNAddStates(86, 89);
                  break;
               case 110:
                  if (curChar == 32)
                     jjCheckNAddStates(86, 89);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 112:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 113:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(90, 92);
                  break;
               case 114:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(114, 115);
                  break;
               case 115:
                  if (curChar == 41 && kind > 67)
                     kind = 67;
                  break;
               case 117:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 109;
                  break;
               case 118:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 120:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(120, 121);
                  break;
               case 121:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(122, 132);
                  break;
               case 122:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(122, 132);
                  break;
               case 123:
                  if (curChar == 46)
                     jjCheckNAddStates(93, 96);
                  break;
               case 124:
                  if (curChar == 32)
                     jjCheckNAddStates(93, 96);
                  break;
               case 125:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(125, 126);
                  break;
               case 126:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 127:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(97, 99);
                  break;
               case 128:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 129:
                  if (curChar == 41 && kind > 68)
                     kind = 68;
                  break;
               case 131:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 132:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(133, 134);
                  break;
               case 134:
                  if (curChar == 40)
                     jjCheckNAddTwoStates(135, 145);
                  break;
               case 135:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(135, 145);
                  break;
               case 136:
                  if (curChar == 46)
                     jjCheckNAddStates(100, 103);
                  break;
               case 137:
                  if (curChar == 32)
                     jjCheckNAddStates(100, 103);
                  break;
               case 138:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(138, 139);
                  break;
               case 139:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 140:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(104, 106);
                  break;
               case 141:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(141, 142);
                  break;
               case 144:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 145:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 146:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(146, 147);
                  break;
               case 148:
                  if (curChar == 32)
                     jjCheckNAddStates(107, 110);
                  break;
               case 149:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(149, 150);
                  break;
               case 150:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 151:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(111, 113);
                  break;
               case 152:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(152, 157);
                  break;
               case 153:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(154, 155);
                  break;
               case 154:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(154, 155);
                  break;
               case 155:
                  if (curChar == 41 && kind > 70)
                     kind = 70;
                  break;
               case 156:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 157:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 159:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(159, 160);
                  break;
               case 160:
                  if (curChar == 40)
                     jjCheckNAddStates(114, 117);
                  break;
               case 161:
                  if (curChar == 32)
                     jjCheckNAddStates(114, 117);
                  break;
               case 162:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(162, 163);
                  break;
               case 163:
                  if ((0x500000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 164:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(118, 120);
                  break;
               case 165:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(165, 170);
                  break;
               case 166:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 167:
                  if (curChar == 32)
                     jjCheckNAddTwoStates(167, 168);
                  break;
               case 168:
                  if (curChar == 41 && kind > 71)
                     kind = 71;
                  break;
               case 169:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 170:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 173:
                  if (curChar == 40)
                     jjCheckNAddStates(8, 23);
                  break;
               case 174:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(0, 7);
                  break;
               case 175:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(176);
                  break;
               case 176:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddTwoStates(175, 176);
                  break;
               case 177:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(177, 46);
                  break;
               case 178:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(179);
                  break;
               case 179:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 180:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(181, 182);
                  break;
               case 181:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(182);
                  break;
               case 182:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 183;
                  break;
               case 183:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 184:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(185, 186);
                  break;
               case 185:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(186);
                  break;
               case 186:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(187, 188);
                  break;
               case 187:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(188);
                  break;
               case 188:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(189, 190);
                  break;
               case 189:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(190);
                  break;
               case 190:
                  if ((0x3ff000000000000L & l) != 0L && kind > 63)
                     kind = 63;
                  break;
               case 191:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(191, 48);
                  break;
               case 192:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 62)
                     kind = 62;
                  jjCheckNAddStates(121, 123);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x7fffffffffffffeL & l) != 0L)
                  {
                     if (kind > 58)
                        kind = 58;
                     jjCheckNAddTwoStates(42, 43);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(124, 125);
                  else if ((0x10000000100000L & l) != 0L)
                     jjAddStates(126, 127);
                  else if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 91)
                     jjCheckNAddStates(128, 139);
                  break;
               case 0:
                  if ((0x2000000020L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 1:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if ((0x400000004000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 5:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L && kind > 17)
                     kind = 17;
                  break;
               case 12:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x4000000040L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 17:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if ((0x8000000080L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
               case 21:
                  if ((0x7fffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(21);
                  break;
               case 22:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(126, 127);
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 24:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(11);
                  break;
               case 27:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(124, 125);
                  break;
               case 29:
                  if ((0x4000000040000L & l) != 0L && kind > 16)
                     kind = 16;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x10000000100000L & l) != 0L && kind > 54)
                     kind = 54;
                  break;
               case 35:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 37:
                  jjAddStates(140, 141);
                  break;
               case 39:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(142, 143);
                  break;
               case 41:
                  if ((0x7fffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAddTwoStates(42, 43);
                  break;
               case 42:
                  if ((0x7fffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 58)
                     kind = 58;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if ((0x7fffffffffffffeL & l) == 0L)
                     break;
                  if (kind > 60)
                     kind = 60;
                  jjCheckNAdd(43);
                  break;
               case 51:
                  if (curChar == 91)
                     jjCheckNAddStates(43, 46);
                  break;
               case 63:
                  if (curChar == 93 && kind > 64)
                     kind = 64;
                  break;
               case 64:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(144, 145);
                  break;
               case 67:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(146, 147);
                  break;
               case 69:
                  if (curChar == 91)
                     jjCheckNAddStates(57, 60);
                  break;
               case 82:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(148, 149);
                  break;
               case 85:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(150, 151);
                  break;
               case 98:
                  if (curChar == 93 && kind > 66)
                     kind = 66;
                  break;
               case 99:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(152, 153);
                  break;
               case 102:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 101;
                  break;
               case 116:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(154, 155);
                  break;
               case 119:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 130:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(156, 157);
                  break;
               case 142:
                  if (curChar == 93 && kind > 69)
                     kind = 69;
                  break;
               case 143:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(158, 159);
                  break;
               case 147:
                  if (curChar == 91)
                     jjCheckNAddStates(107, 110);
                  break;
               case 158:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(160, 161);
                  break;
               case 171:
                  if ((0x7fffffffffffffeL & l) != 0L)
                     jjAddStates(162, 163);
                  break;
               case 172:
                  if (curChar == 91)
                     jjCheckNAddStates(128, 139);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(140, 141);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 193 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
static private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         jjmatchedKind = 6;
         return jjMoveStringLiteralDfa1_1(0x80L);
      case 13:
         return jjMoveStringLiteralDfa1_1(0x100L);
      default :
         return 1;
   }
}
static private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 13:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   175, 177, 46, 178, 179, 191, 48, 192, 88, 89, 90, 102, 105, 106, 107, 119, 
   122, 132, 135, 145, 161, 162, 163, 171, 50, 51, 68, 69, 86, 87, 103, 104, 
   120, 121, 133, 134, 146, 147, 159, 160, 37, 38, 39, 52, 53, 54, 67, 54, 
   56, 66, 58, 59, 60, 64, 60, 62, 63, 70, 71, 72, 85, 72, 74, 84, 
   76, 77, 78, 82, 78, 80, 81, 88, 89, 90, 102, 93, 94, 95, 99, 95, 
   97, 98, 105, 106, 107, 119, 110, 111, 112, 116, 112, 114, 115, 124, 125, 126, 
   130, 126, 128, 129, 137, 138, 139, 143, 139, 141, 142, 148, 149, 150, 158, 150, 
   152, 157, 161, 162, 163, 171, 163, 165, 170, 175, 176, 192, 33, 35, 25, 27, 
   52, 53, 54, 67, 70, 71, 72, 85, 148, 149, 150, 158, 37, 38, 39, 40, 
   62, 63, 56, 66, 80, 81, 74, 84, 97, 98, 114, 115, 128, 129, 141, 142, 
   152, 157, 165, 170, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\46", null, null, "\53", "\55", null, "\50", "\51", 
"\133", "\135", "\56\56\56", "\73", "\72", "\75", "\42", "\76\76", "\76\75", "\74\75", 
"\76", "\74", "\75\75", "\44", "\54", "\100", "\56", null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "comentarioGeral",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfe7ffffffffffc01L, 0x1ffL, 
};
static final long[] jjtoSkip = {
   0x3feL, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[193];
static private final int[] jjstateSet = new int[386];
static protected char curChar;
/** Constructor. */
public NetworkCompilerTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public NetworkCompilerTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 193; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 9)
       {
          jjmatchedKind = 9;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
