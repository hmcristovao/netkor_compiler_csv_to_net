Start -> settings aliasTable dataFrame rowsDeleting adjacencyList bipartiteProjection

-------------------------------------------------------------------------------------------------------------------------------------------------------
settings -> (<SETTINGS> <COLON> (variavelSettings)*)?

variavelSettings -> csvDefinition | columnSeparatorDefinition | dateFormatDefinition | directedNetworkDefinition
                    | attributeLabelDefinition | networkFormatOutputDefinition | fileSufixDefinition

csvDefinition -> <CSV_HEADER> <EQUAL> <LOGIC_VALUE>

columnSeparatorDefinition -> <COLUMN_SEPARATOR> <EQUAL> (<COMMA> | <SEMICOLON> )

dateFormatDefinition -> < DATE_FORMAT > < EQUAL > < DATE >

directedNetworkDefinition -> < DIRECTED_NETWORK > < EQUAL > < LOGIC_VALUE >

attributeLabelDefinition -> < ATTRIBUTE_LABEL > < EQUAL > < ALIAS_TABLE_COLUMN_HEADER >

networkFormatOutputDefinition -> < NETWORK_FORMAT_OUTPUT > < EQUAL > ( < NETWORK_FORMAT > ) ( < COMMA > < NETWORK_FORMAT > )*

fileSufixDefinition -> < FILE_SUFIX > < EQUAL > < ALIAS_TABLE_COLUMN_HEADER >

-------------------------------------------------------------------------------------------------------------------------------------------------------
                                       
aliasTable ->  (< ALIAS_TABLE > < COLON > (aliasTableBody)+)?
                
aliasTableBody -> < MAJOR_SYMBOL >  < ALIAS_TABLE_COLUMN_HEADER > < VARIABLE_TYPE > < EQUAL > < CSV_COLUMN_HEADER >

-------------------------------------------------------------------------------------------------------------------------------------------------------

dataFrame ->   (< DATA_FRAME > < COLON >
                dataFrameBody)?

dataFrameBody -> ( < MAJOR_SYMBOL > < DATA_FRAME_COLUMN_HEADER > < COMMA > < ATTRIBUTE_VALUE > commandList )+

commandList -> (command)+

command -> returnCommand | ifCommand | attribuitionCommand

returnCommand -> < RETURN > expression

attribuitionCommand -> < LOCAL_VARIABLE > < EQUAL > expression

ifCommand -> <IF> expression <COLON> commandList
             (<ELIF> expression <COLON> commandList)*
             (<ELSE> <COLON> commandList)?

expression -> expression_1 

expression_1 -> expression_2 ( <CONCAT> expression_2 )*

expression_2 -> expression_3 ( <LOGICAL_OPERATOR> expression_3 )*

expression_3 -> expression_4 ( <RELATIONAL_OPERATOR> expression_4 )*

expression_4 -> expression_5 ( <OPERATOR> expression_5 )*

expression_5 -> (<NOT>)? expression_6

expression_6 -> operand |
                <PARENTHESIS_OPEN> expression <PARENTHESIS_CLOSE>

operand ->	 <NEGATIVE>?  <NUMBER>  | 
< TEXT > | 
< ALIAS_TABLE_COLUMN_HEADER > | 
<DATA_FRAME_COLUMN_HEADER>

-------------------------------------------------------------------------------------------------------------------------------------------------------
          
rowsDeleting -> (<ROWS_DELETION> <COLON>
                 (rowsDeletingBody)+)?

rowsDeletingBody -> <MAJOR_SYMBOL> <DATA_FRAME_COLUMN_HEADER> <EQUAL> expression

-------------------------------------------------------------------------------------------------------------------------------------------------------

adjacencyList -> (<ADJACENCY_LIST> <COLON> (adjacencyBody)+)?

adjacencyBody -> <MAJOR_SYMBOL> <DATA_FRAME_COLUMN_HEADER>
                  
-------------------------------------------------------------------------------------------------------------------------------------------------------

bipartiteProjection -> (<BIPARTITE_PROJECTION> <COLON>
                        (bipartiteBody)+)?

bipartiteBody -> <MAJOR_SYMBOL> <PARENTHESIS_OPEN> dataFrameColumnHeaderNodesList <PARENTHESIS_CLOSE> <AT_SIGN> <PARENTHESIS_OPEN> dataFrameColumnHeaderLinksList <PARENTHESIS_CLOSE>

dataFrameColumnHeaderNodesList -> <DATA_FRAME_COLUMN_HEADER> (<COMMA>  <DATA_FRAME_COLUMN_HEADER>)*

dataFrameColumnHeaderLinksList -> <DATA_FRAME_COLUMN_HEADER> (<COMMA>  <DATA_FRAME_COLUMN_HEADER>)*

