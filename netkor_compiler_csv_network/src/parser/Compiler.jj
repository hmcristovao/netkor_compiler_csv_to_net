/* Compiler: translate from CSV files to Network by map file
���Default format: NET (accepted by R, Gephi and Pajek)
*/

options {
	DEBUG_PARSER = false;
	DEBUG_TOKEN_MANAGER = false;
}

PARSER_BEGIN(Compiler)

package parser;
import java.io.*;
import error.*;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

public class Compiler {
	public static void main(String args[])  throws ParseException  {
		Compiler compiler = null;
		HashMap<String,String> hashSection1 =  new HashMap<String,String>();
		HashMap<String,String> hashSection2 =  new HashMap<String,String>();
		HashMap<String,String> hashSection3 =  new HashMap<String,String>();
		try {
			compiler = new Compiler(new FileInputStream("exemplo.map"));
			String csvFile = "exemplo.csv";

			Compiler.start(hashSection1,hashSection2,hashSection3);

			
 			/*while ((line = br.readLine(hashSection2)) != null) {

                // use comma as separator
                String[] country = line.split(cvsSplitBy);

                System.out.println("Country [code= " + country[4] + " , name=" + country[5] + "]");

            }
			*/

			String line = "";
			BufferedReader br = new BufferedReader(new FileReader(csvFile));
			while((line = br.readLine()) != null)
			{ 
	                    String[] country = line.split(",");
						ArrayList x = new ArrayList();
						for(int i = 0; i < country.length; i++)
						{
						  	for(String key : hashSection2.keySet())
	                   		{
								if(key.equals(country[i]))
								{
									x.add(i);
								}
								
   	                    	}
						}
						for (Object i : x) {
						  int a = (Integer) i;
					      System.out.printf(country[a]);
					    }

						System.out.print("\n");
	                   	/*for (Map.Entry<String,String> e: map.entrySet()) {
   						 // you can use e.getKey() and e.getValue() here
						}	
	                     */ 
	                    //System.out.println(country[0]);
						//System.out.println(line);
	        }
		/*	//Exibir as configurações na seção 1:
			for (String key : hashSection2.keySet()) {
					
	                   //Capturamos o valor a partir da chave
	                 //  String value = hashSection2.get(key);
	                  // System.out.println(key + " = " + value);
					
         	}
*/
         	//Impressão do arquivo .net (1% completo)
         	System.out.println("\n*Vertices " + (hashSection3.size()));
			
		}
		catch(FileNotFoundException e) {
			System.err.println("\nFile not found: ");
		}
		catch (IOException e) {
			System.err.println("File creation error: " + e.getMessage());
		}
		catch(TokenMgrError e) {
			System.err.println("\nLexical error: " + e.getMessage());
		}
		catch(ParseException e) {
			System.err.println("\nSintax error: " + e.getMessage());
		}
		catch(SemanticError e) {
			System.err.println("\nSemantic error: " + e.getMessage());
		}
	}
}

PARSER_END(Compiler)
 
SKIP : { " " | "\t" | "\r" | "\n" }

SKIP : { "#" : comentarioGeral }
<comentarioGeral> SKIP: { "\n" | "\n\r" | "\r\n" : DEFAULT | <~[]> }

TOKEN [IGNORE_CASE] : {
         
         < PARENTHESIS_OPEN: "(" > |
          < PARENTHESIS_CLOSE: ")" > |
          < BRACKET_OPEN: "[" > |
          < BRACKET_CLOSE: "]" > |
          < ELLIPSIS: "..." > |
          < SEMICOLON: ";" > |
          < COLON: ":" > |
          < EQUAL: "=" > |
          < TYPE_VARIABLE: "*" | ">" > |
          < NETWORK_FORMAT: "NET" | "PAJ" > |
          < LOGIC_VALUE: "TRUE" | "FALSE" > |
          < TARGET_FORMAT: "Target format" > |
          < DIRECTED_NETWORK: "Directed network" > |
          < BIPARTITE_PROJECTION: "Bipartite projection" > |
          < LAYOUT: "Layout" > |            
          < LAYOUT_NAME: "" > |
          < NO: "NO" > |
          < OR: "OR" > |
          < AND: "AND" > |
          < VARIABLES: "Variables" > |
          < NETWORK: "Network" > |
          < #LETTERCHARACTER: ["a" - "z"] | ["A" - "Z"] > |
          < #NUMBERCHARACTER: (["0"-"9"])* ((".")? ["0"-"9"])+ > |
          < #VARIABLECHARACTER: ["a" - "z", "A" - "Z" ,"0" - "9", "_"] > |
          < OPTION: < NUMBERCHARACTER > | < LETTERCHARACTER  > > |
 	     < VERTEX_NAME_WITH_QUOTE_MARK: "\"" (~["#"])* "\"" > |
 	     < HEAD_NAME_IN_CSV_OR_VARIABLE_NAME: (< LETTERCHARACTER >) 
   (< VARIABLECHARACTER > | "." )* >



}


void start(HashMap<String,String> hash1, HashMap<String,String> hash2,HashMap<String,String> hash3): { }
{
  	section1(hash1)
  	section2(hash2)
  	section3(hash3)
	{  return; }
}

void section1(HashMap<String,String>  lista):
{
  		Token t;
  		String hue = "";
}
{
  	<TARGET_FORMAT> <COLON> (t = <NETWORK_FORMAT>)
	{
	  hue = t + "";
  	  lista.put("Network Format",hue);
  	}
  	 <DIRECTED_NETWORK>
  		
  	<COLON> <LOGIC_VALUE> <BIPARTITE_PROJECTION> <COLON> (t =<LOGIC_VALUE>
  	{
	  hue = t + "";
  	  lista.put("Bipartite Projection",hue);
  	}
 	)
  	<LAYOUT> <COLON> ( t = <LAYOUT_NAME> | t =  <NO>
  	{
	  hue = t + "";
  	  lista.put("Layout Name",hue);
  	}
  	)
  	
	{  return; }
}

void section2(HashMap<String,String> hash): { }
{
	<VARIABLES> <COLON> ( variableDefinition(hash) )+
	{  return; }
}

void section3(HashMap<String,String>  lista): { }
{
  	<NETWORK> <COLON> ( vertexDefinition(lista) )+
	{  return; }
}

void variableDefinition(HashMap<String,String> hash):
{
  String typeS ="", hue = "",  hue2 = ""; Token type, name, variable;
}
{
	type = <TYPE_VARIABLE> name = <HEAD_NAME_IN_CSV_OR_VARIABLE_NAME>
	(<COLON> variable = <HEAD_NAME_IN_CSV_OR_VARIABLE_NAME>
	{
		hue2 = variable + "";
	}
	)?
	{
	   typeS = type + "";
	   hue = name + "";
	   if(typeS.equals("*"))
	   {
	     	hue ="#" + hue; 
			hash.put(hue,hue2);
	   }
	   else
	   {
	      hash.put(hue,hue2);
	   }
	
	}			
	{  return; }
}

void vertexDefinition(HashMap<String,String> lista): { Token t; }
{
	<VERTEX_NAME_WITH_QUOTE_MARK> <COLON>
                    ( <HEAD_NAME_IN_CSV_OR_VARIABLE_NAME> )
                    <EQUAL> rangeExpression()
                    ((<OR>|<AND>) <HEAD_NAME_IN_CSV_OR_VARIABLE_NAME> <EQUAL> rangeExpression())*

     {  return; }
	
}

void rangeExpression(): { }
{	  (<PARENTHESIS_OPEN> | <BRACKET_OPEN>) 
                    range() 
                   (<PARENTHESIS_CLOSE> | <BRACKET_CLOSE>)

			   | <OPTION>
		{  return; }

}

void range(): {Token t; String hue = "";}
{
	   (	     <OPTION> ( (<SEMICOLON> <OPTION>) | ( <ELLIPSIS> (<OPTION>)?) ) )
	   | (<ELLIPSIS> <OPTION>)


	   {  return; }
}
